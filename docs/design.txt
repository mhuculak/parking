Data Entry Servlet
==================

Steps

1. display map

- should be possible to use Geolocation API to get position from phone's GPS

navigator.geolocation.getCurrentPosition(function(location) {
  console.log(location.coords.latitude);
  console.log(location.coords.longitude);
  console.log(location.coords.accuracy);
});

2. take picture of parking sign using camera


3. specify which side of the street

- this can be done by dragging across the street in the direction that
  the picture was taken


4. upload image

- upload will include the endpoints of the direction vector
- should also be possible to get GPS data from EXIF header of image

5. process upload form data

- street name derived from position using google maps api
- neighborhood from position would also be useful to help optimize database search
- store image, street and direction vector endpoints in database (withtimestamp)

6. display signs

- each uploaded sign image will be overlayed on the map using an icon
- node.js can be used to connect with mongodb
- positional correction may be required because GPS is only
  accurate to about 8m


7. sign information form

- clicking on a sign icon will display a form used to enter
  data specified on the sign

- the webpage will contain the following:

   i) the sign image
   ii) number of signs in the image
   iii) data for each sign

- signs may need to be sorted by priority 

- signs can specify a period of restriction or permission

- parking period specification:

   i) hours when parking is prohibited (or ALL)
   ii) days of the week when restriction applies (or ALL)
   iii) dates when restriction applies (or ALL)

- other attributes:

   i) permit holders excepted
   ii) time limit
   iii) hourly rate


8. processing sign info

- data for each sign stored in the database with 
  reference to the source image

- signs on the same side of the street need to be correlated
  to form street segments


9. display parking data on map

- each visible segment is displayed using the following color scheme
  based on time of the day:

   i) green for free parking
   ii) turqoise for paid parking
   iii) red for restricted parking
   
- the thickness of the line indicates the duration of the current period

10. detailed parking schedule

- when the user clicks on the street the detailed schedule will be   
  displayed for both sides of the street


11. need a tool to backup and restore the data